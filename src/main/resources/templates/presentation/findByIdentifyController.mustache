package {{package}};
{{#imports}}
import {{.}};
{{/imports}}
import {{queryPackage}}.FindBy{{identifier.nameCapitalized}}{{name}}Query;
import {{dtoPackage}}.{{name}}Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/queries/{{nameLowercase}}")
@Tag(name = "{{name}} Query ", description = "Endpoints for querying {{nameLowercase}} by {{identifier.name}}")
@Slf4j
public class FindBy{{identifier.nameCapitalized}}{{name}}Controller {

private final QueryGateway queryGateway;

public FindBy{{identifier.nameCapitalized}}{{name}}Controller(@Lazy QueryGateway queryGateway) {
this.queryGateway = queryGateway;
}

@GetMapping("/{id}")
@Operation(
summary = "Find a {{nameLowercase}} by {{identifier.name}}",
description = "Returns a {{nameLowercase}} resource given its unique {{identifier.name}}"
)
@ApiResponses(value = {
@ApiResponse(
responseCode = "200",
description = "{{name}} found successfully",
content = @Content(mediaType = "application/json", schema = @Schema(implementation = {{name}}Response.class))
),
@ApiResponse(
responseCode = "404",
description = "{{name}} not found",
content = @Content
),
@ApiResponse(
responseCode = "500",
description = "Internal server error",
content = @Content
)
})
public CompletableFuture<ResponseEntity<{{name}}Response>> findBy{{identifier.nameCapitalized}}(
	@Parameter(description = "The unique identifier of the {{nameLowercase}}", required = true)
	@PathVariable String id
	) {
	{{name}}{{identifier.nameCapitalized}} idVo = {{identifier.nameCapitalized}}{{name}}.create(id);
	FindBy{{identifier.nameCapitalized}}{{name}}Query query = new FindBy{{identifier.nameCapitalized}}{{name}}Query(idVo);

	return queryGateway.query(query, {{name}}Response.class)
	.thenApply(ResponseEntity::ok)
	.exceptionally(ex -> {
	log.error("Failed to find {{nameLowercase}} by {{identifier.name}}: {}", ex.getMessage());
	return ResponseEntity.internalServerError().build();
	});
	}
	}
