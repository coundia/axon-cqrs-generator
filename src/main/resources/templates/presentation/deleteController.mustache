package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import {{commandPackage}}.Delete{{name}}Command;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import org.springframework.http.HttpStatus;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/commands/{{nameLowercase}}")
@Tag(name = "{{name}} Controller", description = "Endpoints for managing {{nameLowercase}}s")
@Slf4j
public class Delete{{name}}Controller {

private final CommandGateway commandGateway;
private final QueryGateway queryGateway;

public Delete{{name}}Controller(@Lazy CommandGateway commandGateway,@Lazy QueryGateway queryGateway) {
this.commandGateway = commandGateway;
this.queryGateway = queryGateway;
}

@DeleteMapping("/{id}")
@Operation(description = "Delete a {{name}} by id")
public CompletableFuture<ResponseEntity<String>> delete{{name}}(@PathVariable String id) {
	if (id == null || id.isEmpty()) {
	return CompletableFuture.completedFuture(ResponseEntity.badRequest().body("Invalid id"));
	}
	log.info("Deleting {{name}} with id: {}", id);
	{{name}}Id idVo = {{name}}Id.create(id);

	return Mono.fromFuture(() -> queryGateway.query(
	new FindById{{name}}Query(idVo), {{name}}Response.class))
	.subscribeOn(Schedulers.boundedElastic())
	.flatMap(found{{name}} -> {
	if (found{{name}} == null) {
	return Mono.error(new {{name}}NotFoundException(idVo));
	}
	return Mono.fromFuture(() -> commandGateway
	.send(Delete{{name}}Command.builder().id(idVo).build()))
	.subscribeOn(Schedulers.boundedElastic());
	})
	.map(result -> ResponseEntity.ok("{{name}} deleted successfully"))
	.onErrorResume({{name}}NotFoundException.class, ex -> {
	log.info("{{name}} not found: {}", ex.getMessage());
	return Mono.just(ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage()));
	})
	.onErrorResume(ex -> {
	log.error("Error deleting {{name}} with id {}: {}", id, ex.getMessage(), ex);
	return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	.body("Error deleting {{name}}: " + ex.getMessage()));
	})
	.toFuture();
	}

}
