package {{package}};

{{#imports}}
import {{.}};
{{/imports}}
import {{queryPackage}}.FindBy{{field.nameCapitalized}}{{name}}Query;
import {{dtoPackage}}.{{name}}Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

import java.util.List;

@RestController
@RequestMapping("/api/v1/queries/{{nameLowercase}}")
@Tag(name = "{{name}} Query ", description = "Endpoints for querying {{nameLowercase}}s by {{field.name}}")
@Slf4j
public class {{className}} {

private final QueryGateway queryGateway;

public {{className}}(@Lazy QueryGateway queryGateway) {
this.queryGateway = queryGateway;
}

@GetMapping("/by-{{field.name}}")
@Operation(
summary = "Find {{nameLowercase}} by {{field.name}}",
description = "Returns a list of {{nameLowercase}}s that match the given {{field.name}}"
)
@ApiResponses(value = {
@ApiResponse(responseCode = "200", description = "List of matching {{nameLowercase}}s",
content = @Content(mediaType = "application/json",
schema = @Schema(implementation = {{name}}Response.class))),
@ApiResponse(responseCode = "400", description = "Invalid parameter", content = @Content),
@ApiResponse(responseCode = "500", description = "Internal server error", content = @Content)
})
public Mono<List<{{name}}Response>> findBy{{field.nameCapitalized}}(
	@Parameter(description = "Value of the {{field.name}} to filter by", required = true)
	@RequestParam String {{field.name}}) {

	{{name}}{{field.nameCapitalized}} {{field.name}}Vo = {{name}}{{field.nameCapitalized}}.create({{field.name}});
	FindBy{{field.nameCapitalized}}{{name}}Query query = new FindBy{{field.nameCapitalized}}{{name}}Query({{field.name}}Vo);

	return Mono.fromFuture(queryGateway.query(
	query,
	org.axonframework.messaging.responsetypes.ResponseTypes.multipleInstancesOf({{name}}Response.class)
	));
	}
	}
