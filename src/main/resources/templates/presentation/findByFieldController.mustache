package {{package}};
{{#imports}}
import {{.}};
{{/imports}}
import {{queryPackage}}.FindBy{{field.nameCapitalized}}{{name}}Query;
import {{dtoPackage}}.{{name}}Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.queryhandling.QueryGateway;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/v1/queries/{{nameLowercase}}")
@Tag(name = "{{name}} Query Controller", description = "Endpoints for querying {{nameLowercase}}s by {{field.name}}")
@Slf4j
public class {{className}}{

private final QueryGateway queryGateway;

public FindBy{{field.nameCapitalized}}{{name}}Controller(@Lazy QueryGateway queryGateway) {
this.queryGateway = queryGateway;
}

@GetMapping("/by-{{field.name}}")
@Operation(summary = "Find {{nameLowercase}} by {{field.name}}", description = "Returns a {{nameLowercase}} based on the {{field.name}}")
public CompletableFuture<ResponseEntity<{{name}}Response>> findBy{{field.nameCapitalized}}(@RequestParam String {{field.name}}) {
	FindBy{{field.nameCapitalized}}{{name}}Query query = new FindBy{{field.nameCapitalized}}{{name}}Query({{field.name}});
	return queryGateway.query(query, {{name}}Response.class)
	.thenApply(ResponseEntity::ok)
	.exceptionally(ex -> {
	log.error("Failed to find {{nameLowercase}} by {{field.name}}: {}", ex.getMessage());
	return ResponseEntity.internalServerError().build();
	});
	}
	}
