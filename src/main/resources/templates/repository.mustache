package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

import org.springframework.data.r2dbc.repository.Query;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import org.springframework.stereotype.Repository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Repository
public interface {{name}}Repository extends ReactiveCrudRepository<{{name}}, String> {

Flux<{{name}}> findAllByNameContainingIgnoreCase(String name);

@Query("SELECT * FROM {{nameLower}}s ORDER BY name LIMIT :limit OFFSET :offset")
Flux<{{name}}> findAllByPage(int limit, int offset);

@Query("INSERT INTO {{nameLower}}s (id{{#fields}}, {{name}}{{/fields}}) VALUES (:id{{#fields}}, :{{name}}{{/fields}}) RETURNING *")
Mono<{{name}}> insert(String id{{#fields}}, {{type}} {{name}}{{/fields}});

@Query("UPDATE {{nameLower}}s SET name = :name WHERE id = :id")
Mono<Integer> updateNameById(String id, String name);

@Query("UPDATE {{table}} SET {{#fields}}{{name}} = :{{name}}{{^last}}, {{/last}}{{/fields}} WHERE id = :id")
Mono<Integer> updateAllById(String id,{{#fields}}{{type}} {{name}}, {{/fields}});

}
